"""add_user_model_and_auth_improvements

Revision ID: 9b9b57e49e03
Revises: 967477b87788
Create Date: 2025-08-10 21:31:48.949498

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9b9b57e49e03'
down_revision = '967477b87788'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=True),
    sa.Column('avatar_url', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=False),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('last_failed_login', sa.DateTime(), nullable=True),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('api_key', sa.String(length=64), nullable=True),
    sa.Column('api_key_created_at', sa.DateTime(), nullable=True),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.CheckConstraint("email ~* '^[A-Za-z0-9._%%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}$'", name='ck_users_email_format'),
    sa.CheckConstraint('length(username) >= 3', name='ck_users_username_length'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_users_admin_active', 'users', ['is_admin', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_api_key'), 'users', ['api_key'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index('ix_users_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index('ix_users_username_active', 'users', ['username', 'is_active'], unique=False)
    op.create_table('reading_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('chapter_id', sa.UUID(), nullable=False),
    sa.Column('last_page_read', sa.Integer(), nullable=False),
    sa.Column('total_pages', sa.Integer(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('last_read_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'chapter_id', name='uq_reading_progress_user_chapter')
    )
    op.create_index('ix_reading_progress_chapter_id', 'reading_progress', ['chapter_id'], unique=False)
    op.create_index('ix_reading_progress_last_read', 'reading_progress', ['user_id', 'last_read_at'], unique=False)
    op.create_index('ix_reading_progress_user_completed', 'reading_progress', ['user_id', 'is_completed'], unique=False)
    op.create_index('ix_reading_progress_user_id', 'reading_progress', ['user_id'], unique=False)
    op.drop_index(op.f('ix_chapters_read_at'), table_name='chapters')
    op.create_index('ix_chapters_read_at', 'chapters', ['is_read', 'read_at'], unique=False)
    # Handle existing notifications by first making user_id nullable, then populate and make NOT NULL
    op.add_column('notifications', sa.Column('user_id', sa.UUID(), nullable=True))
    
    # Create a default admin user first if it doesn't exist
    # This will be populated later via the API setup endpoint
    
    # For now, delete any existing notifications since we can't assign them to a user
    op.execute('DELETE FROM notifications')
    
    # Now make user_id NOT NULL
    op.alter_column('notifications', 'user_id', nullable=False)
    
    op.drop_index(op.f('ix_notifications_created_at_desc'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_is_read_created_at'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_series_id_is_read'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_unread_created'), table_name='notifications')
    op.create_index('ix_notifications_user_created', 'notifications', ['user_id', 'created_at'], unique=False)
    op.create_index('ix_notifications_user_unread_created', 'notifications', ['user_id', 'is_read', 'created_at'], unique=False)
    op.create_foreign_key(None, 'notifications', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # Handle existing push subscriptions similarly
    op.add_column('push_subscriptions', sa.Column('user_id', sa.UUID(), nullable=True))
    
    # Delete existing push subscriptions since we can't assign them to a user
    op.execute('DELETE FROM push_subscriptions')
    
    # Now make user_id NOT NULL
    op.alter_column('push_subscriptions', 'user_id', nullable=False)
    op.drop_index(op.f('ix_push_subscriptions_active'), table_name='push_subscriptions')
    op.drop_constraint(op.f('push_subscriptions_endpoint_key'), 'push_subscriptions', type_='unique')
    op.create_index('ix_push_subscriptions_user_active', 'push_subscriptions', ['user_id', 'is_active'], unique=False)
    op.create_unique_constraint('uq_push_subscription_user_endpoint', 'push_subscriptions', ['user_id', 'endpoint'])
    op.create_foreign_key(None, 'push_subscriptions', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('series', sa.Column('user_id', sa.UUID(), nullable=True))
    op.drop_index(op.f('ix_series_watching_enabled'), table_name='series', postgresql_where='(watching_enabled = true)')
    op.create_foreign_key(None, 'series', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # Handle existing user_lists
    op.add_column('user_lists', sa.Column('user_id', sa.UUID(), nullable=True))
    
    # Delete existing user lists since we can't assign them to a user
    op.execute('DELETE FROM user_lists')
    
    # Now make user_id NOT NULL
    op.alter_column('user_lists', 'user_id', nullable=False)
    op.create_foreign_key(None, 'user_lists', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'user_lists', type_='foreignkey')
    op.drop_column('user_lists', 'user_id')
    op.drop_constraint(None, 'series', type_='foreignkey')
    op.create_index(op.f('ix_series_watching_enabled'), 'series', ['watching_enabled'], unique=False, postgresql_where='(watching_enabled = true)')
    op.drop_column('series', 'user_id')
    op.drop_constraint(None, 'push_subscriptions', type_='foreignkey')
    op.drop_constraint('uq_push_subscription_user_endpoint', 'push_subscriptions', type_='unique')
    op.drop_index('ix_push_subscriptions_user_active', table_name='push_subscriptions')
    op.create_unique_constraint(op.f('push_subscriptions_endpoint_key'), 'push_subscriptions', ['endpoint'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_push_subscriptions_active'), 'push_subscriptions', ['is_active'], unique=False)
    op.drop_column('push_subscriptions', 'user_id')
    op.drop_constraint(None, 'notifications', type_='foreignkey')
    op.drop_index('ix_notifications_user_unread_created', table_name='notifications')
    op.drop_index('ix_notifications_user_created', table_name='notifications')
    op.create_index(op.f('ix_notifications_unread_created'), 'notifications', ['is_read', 'created_at'], unique=False)
    op.create_index(op.f('ix_notifications_series_id_is_read'), 'notifications', ['series_id', 'is_read'], unique=False)
    op.create_index(op.f('ix_notifications_is_read_created_at'), 'notifications', ['is_read', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_notifications_created_at_desc'), 'notifications', [sa.literal_column('created_at DESC')], unique=False)
    op.drop_column('notifications', 'user_id')
    op.drop_index('ix_chapters_read_at', table_name='chapters')
    op.create_index(op.f('ix_chapters_read_at'), 'chapters', ['read_at'], unique=False)
    op.drop_index('ix_reading_progress_user_id', table_name='reading_progress')
    op.drop_index('ix_reading_progress_user_completed', table_name='reading_progress')
    op.drop_index('ix_reading_progress_last_read', table_name='reading_progress')
    op.drop_index('ix_reading_progress_chapter_id', table_name='reading_progress')
    op.drop_table('reading_progress')
    op.drop_index('ix_users_username_active', table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index('ix_users_email_active', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_api_key'), table_name='users')
    op.drop_index('ix_users_admin_active', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###