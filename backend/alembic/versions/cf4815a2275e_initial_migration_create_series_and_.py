"""Initial migration: Create Series and Chapter schemas with essential indexes

Revision ID: cf4815a2275e
Revises:
Create Date: 2025-08-02 22:12:16.766549

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "cf4815a2275e"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "job_queue",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("job_type", sa.String(length=100), nullable=False),
        sa.Column("payload", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("started_at", sa.DateTime(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column("retry_count", sa.Integer(), nullable=False),
        sa.Column("max_retries", sa.Integer(), nullable=False),
        sa.Column("scheduled_at", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_job_queue_job_type"), "job_queue", ["job_type"], unique=False)
    op.create_index(op.f("ix_job_queue_priority"), "job_queue", ["priority"], unique=False)
    op.create_index(op.f("ix_job_queue_scheduled_at"), "job_queue", ["scheduled_at"], unique=False)
    op.create_index(op.f("ix_job_queue_status"), "job_queue", ["status"], unique=False)
    op.create_table(
        "library_paths",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("path", sa.Text(), nullable=False),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.Column("scan_interval_hours", sa.Integer(), nullable=False),
        sa.Column("last_scan", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("path"),
    )
    op.create_table(
        "series",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("title_primary", sa.String(length=500), nullable=False),
        sa.Column("title_alternative", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("author", sa.String(length=200), nullable=True),
        sa.Column("artist", sa.String(length=200), nullable=True),
        sa.Column("genres", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("publication_status", sa.String(length=50), nullable=True),
        sa.Column("content_rating", sa.String(length=20), nullable=True),
        sa.Column("language", sa.String(length=10), nullable=False),
        sa.Column("file_path", sa.Text(), nullable=True),
        sa.Column("cover_image_path", sa.Text(), nullable=True),
        sa.Column("mangadx_id", sa.String(length=36), nullable=True),
        sa.Column("source_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("user_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("custom_tags", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("watching_enabled", sa.Boolean(), nullable=False),
        sa.Column("watching_config", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("last_watched_check", sa.DateTime(), nullable=True),
        sa.Column("total_chapters", sa.Integer(), nullable=False),
        sa.Column("read_chapters", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("mangadx_id"),
    )
    op.create_index(op.f("ix_series_artist"), "series", ["artist"], unique=False)
    op.create_index(op.f("ix_series_author"), "series", ["author"], unique=False)
    op.create_index(
        op.f("ix_series_publication_status"), "series", ["publication_status"], unique=False
    )
    op.create_index(op.f("ix_series_title_primary"), "series", ["title_primary"], unique=False)
    op.create_table(
        "user_lists",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("series_ids", sa.ARRAY(sa.String()), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "chapters",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("series_id", sa.UUID(), nullable=False),
        sa.Column("chapter_number", sa.Float(), nullable=False),
        sa.Column("volume_number", sa.Integer(), nullable=True),
        sa.Column("title", sa.String(length=500), nullable=True),
        sa.Column("file_path", sa.Text(), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.Column("page_count", sa.Integer(), nullable=False),
        sa.Column("mangadx_id", sa.String(length=36), nullable=True),
        sa.Column("source_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("last_read_page", sa.Integer(), nullable=False),
        sa.Column("read_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["series_id"], ["series.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("mangadx_id"),
    )
    op.create_index(
        op.f("ix_chapters_chapter_number"), "chapters", ["chapter_number"], unique=False
    )
    op.create_index(
        "ix_chapters_series_chapter_volume",
        "chapters",
        ["series_id", "chapter_number", "volume_number"],
        unique=False,
    )
    op.create_index(op.f("ix_chapters_series_id"), "chapters", ["series_id"], unique=False)
    op.create_index(
        "ix_chapters_series_ordering",
        "chapters",
        ["series_id", "volume_number", "chapter_number"],
        unique=False,
    )
    op.create_index(op.f("ix_chapters_volume_number"), "chapters", ["volume_number"], unique=False)
    op.create_table(
        "annotations",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("chapter_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("page_number", sa.Integer(), nullable=True),
        sa.Column("annotation_type", sa.String(length=50), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["chapter_id"], ["chapters.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_annotations_chapter_id"), "annotations", ["chapter_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_annotations_chapter_id"), table_name="annotations")
    op.drop_table("annotations")
    op.drop_index(op.f("ix_chapters_volume_number"), table_name="chapters")
    op.drop_index("ix_chapters_series_ordering", table_name="chapters")
    op.drop_index(op.f("ix_chapters_series_id"), table_name="chapters")
    op.drop_index("ix_chapters_series_chapter_volume", table_name="chapters")
    op.drop_index(op.f("ix_chapters_chapter_number"), table_name="chapters")
    op.drop_table("chapters")
    op.drop_table("user_lists")
    op.drop_index(op.f("ix_series_title_primary"), table_name="series")
    op.drop_index(op.f("ix_series_publication_status"), table_name="series")
    op.drop_index(op.f("ix_series_author"), table_name="series")
    op.drop_index(op.f("ix_series_artist"), table_name="series")
    op.drop_table("series")
    op.drop_table("library_paths")
    op.drop_index(op.f("ix_job_queue_status"), table_name="job_queue")
    op.drop_index(op.f("ix_job_queue_scheduled_at"), table_name="job_queue")
    op.drop_index(op.f("ix_job_queue_priority"), table_name="job_queue")
    op.drop_index(op.f("ix_job_queue_job_type"), table_name="job_queue")
    op.drop_table("job_queue")
    # ### end Alembic commands ###
