version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kiremisu}
      POSTGRES_USER: ${POSTGRES_USER:-kiremisu}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-scram-sha-256}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kiremisu} -d ${POSTGRES_DB:-kiremisu}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Production environment configuration
      NODE_ENV: production
      AUTH_METHOD: secure_cookies
      JWT_STORAGE: httponly_cookies
      
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-kiremisu}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-kiremisu}
      
      # Security settings for production
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      CSRF_PROTECTION_ENABLED: "true"
      SECURE_COOKIES: "true"
      ENABLE_RATE_LIMITING: "true"
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Session security
      SESSION_EXPIRATION_HOURS: ${SESSION_EXPIRATION_HOURS:-24}
      CSRF_TOKEN_EXPIRATION_HOURS: ${CSRF_TOKEN_EXPIRATION_HOURS:-1}
      
      # SSL/TLS settings
      SSL_REDIRECT: ${SSL_REDIRECT:-true}
      SECURE_PROXY_SSL_HEADER: ${SECURE_PROXY_SSL_HEADER}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    volumes:
      - ${MANGA_STORAGE_PATH:-./manga-storage}:/manga-storage:ro
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Setting up production environment...' &&
        uv run alembic upgrade head &&
        echo 'Starting production backend server...' &&
        uv run gunicorn kiremisu.main:app -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --workers 4 --timeout 120
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      # Production environment configuration
      NODE_ENV: production
      NEXT_PUBLIC_NODE_ENV: production
      AUTH_METHOD: secure_cookies
      
      # API configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      BACKEND_URL: http://backend:8000
      
      # Security settings for production
      JWT_STORAGE: httponly_cookies
      CSRF_PROTECTION_ENABLED: "true"
      SECURE_COOKIES: "true"
      
      # Performance settings
      NEXT_TELEMETRY_DISABLED: 1
      
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for session storage in production (recommended)
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Optional: Nginx reverse proxy (recommended for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_prod_data:
  redis_data:
  backend_logs:
  nginx_logs:

networks:
  default:
    name: kiremisu_production_network